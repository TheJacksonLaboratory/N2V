{
    "path-settings":{
        "pos_train":{
            "long":"--pos_train",
            "nargs":"?",
            "default":"tests/data/ppismall_with_validation/pos_train_edges_max_comp_graph",
            "help":"Input positive training edges path"
        },
        "pos_valid":{
            "long":"--pos_valid",
            "nargs":"?",
            "default":"tests/data/ppismall_with_validation/pos_validation_edges_max_comp_graph",
            "help":"Input positive validation edges path"
        },
        "pos_test":{
            "long":"--pos_test",
            "type":"str",
            "nargs":"?",
            "default":"tests/data/ppismall_with_validation/pos_test_edges_max_comp_graph",
            "help":"Input positive test edges path"
        },
        "neg_train":{
            "long":"--neg_train",
            "type":"str",
            "nargs":"?",
            "default":"tests/data/ppismall_with_validation/neg_train_edges_max_comp_graph",
            "help":"Input negative training edges path"
        },
        "neg_valid":{
            "long":"--neg_valid",
            "type":"str",
            "nargs":"?",
            "default":"tests/data/ppismall_with_validation/neg_validation_edges_max_comp_graph",
            "help":"Input negative validation edges path"
        },
        "output_file":{
            "long":"--output_file",
            "type":"str",
            "nargs":"?",
            "default":"output_results.json",
            "help":"path to the output file which contains results of link prediction"
        }
    },
    "embedding-settings":{
        "embed_graph":{
            "long":"--embed_graph",
            "type":"str",
            "nargs":"?",
            "default":"embedded_graph.embedded",
            "help":"Embeddings path of the positive training graph"
        },
        "edges_embedding_method":{
            "long":"edges_embedding_method",
            "metavar":"EDGES_EMBEDDING_METHOD",
            "type":"str",
            "nargs":"?",
            "default":"hadamard",
            "help":"Embeddings embedding method of the positive training graph. It can be hadamard, weightedL1, weightedL2 or average"
        },
        "embedding_size":{
            "long":"--embedding_size",
            "type":"int",
            "default":200,
            "help":"Number of dimensions which is size of the embedded vectors. Default is 200."
        },
        "embedding_model":{
            "long":"--embedding_model",
            "type":"str",
            "nargs":"?",
            "default":"Skipgram",
            "help":"word2vec model (Skipgram, CBOW, GloVe)"
        }
    },
    "training-settings":{
        "walks_number":{
            "long":"--walks_number",
            "type":"int",
            "default":10,
            "help":"Number of walks per source. Default is 10."
        },
        "context_window":{
            "long":"--context_window",
            "type":"int",
            "default":3,
            "help":"Context size for optimization. Default is 3."
        },
        "epochs":{
            "long":"--epochs",
            "type":"int",
            "default":1,
            "help":"Number of training epochs"
        },
        "workers":{
            "long":"--workers",
            "type":"int",
            "default":8,
            "help":"Number of parallel workers. Default is 8."
        }
    },
    "model-settings":{
        "p":{
            "long":"--p",
            "type":"int",
            "default":1,
            "help":"node2vec p hyperparameter. Default is 1."
        },
        "q":{
            "long":"--q",
            "type":"int",
            "default":1,
            "help":"node2vec q hyperparameter. Default is 1."
        },
        "classifier":{
            "long":"--classifier",
            "type":"str",
            "nargs":"?",
            "default":"LR",
            "help":"Binary classifier for link prediction, it should be either LR, RF, SVM, MLP, FFNN"
        }
    }
}